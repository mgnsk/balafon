/*
# vim: tabstop=4 shiftwidth=4 expandtab
*/

/* Lexical Part */

terminator : ';' | '\n' ;

uint       : _uint ;
_uint      : '0' | '1'-'9' {'0'-'9'} ;

_char      : 'a'-'z' | 'A'-'Z' ;
symbol     : _char ;
rest       : '-' ;

// Note: can't have standalone ident due to ambiguity with symbols.
_ident     : ( _char | _uint ) { _char | _uint } ;
_space     : ' ' ;
_prefix    : ':' ;

cmdBar        : _prefix 'b' 'a' 'r' _space _ident ;
cmdEnd        : _prefix 'e' 'n' 'd' ;
cmdPlay       : _prefix 'p' 'l' 'a' 'y' _space _ident ;
cmdAssign     : _prefix 'a' 's' 's' 'i' 'g' 'n' ;
cmdTempo      : _prefix 't' 'e' 'm' 'p' 'o' ;
cmdTimesig    : _prefix 't' 'i' 'm' 'e' 's' 'i' 'g' ;
cmdVelocity   : _prefix 'v' 'e' 'l' 'o' 'c' 'i' 't' 'y' ;
cmdChannel    : _prefix 'c' 'h' 'a' 'n' 'n' 'e' 'l' ;
cmdProgram    : _prefix 'p' 'r' 'o' 'g' 'r' 'a' 'm' ;
cmdControl    : _prefix 'c' 'o' 'n' 't' 'r' 'o' 'l' ;
cmdStart      : _prefix 's' 't' 'a' 'r' 't' ;
cmdStop       : _prefix 's' 't' 'o' 'p' ;

bracketBegin : '[' ;
bracketEnd   : ']' ;

propSharp        : '#' ;
propFlat         : '$' ;
propStaccato     : '`' ;
propAccent       : '>' ;
propMarcato      : '^' ;
propGhost        : ')' ;
propDot          : '.' ;
propTuplet       : '/' '3' | '/' '5' ;
propLetRing      : '*' ;

blockComment : '/' '*' { . | '*' } '*' '/' ;

!whitespace : ' ' | '\t' | '\r' ;

/* Syntax Part */

<<
import (
    "github.com/mgnsk/balafon/internal/ast"
    "github.com/mgnsk/balafon/internal/parser/token"
)
>>

SourceFile
    : RepeatTerminator DeclList << $1, nil >>
    ;

RepeatTerminator
    : empty                                                << ast.RepeatTerminator(nil), nil >>
    | terminator RepeatTerminator                          << ast.NewRepeatTerminator(string($T0.Lit), $1.(ast.RepeatTerminator)...), nil >>
    ;

DeclList
    : Decl terminator RepeatTerminator DeclList            << ast.NewNodeList($0.(ast.Node), append([]ast.Node{ast.RepeatTerminator{string($T1.Lit)}, $2.(ast.RepeatTerminator)}, $3.(ast.NodeList)...)...), nil >>
    | Decl RepeatTerminator                                << ast.NewNodeList($0.(ast.Node), $1.(ast.RepeatTerminator)), nil >>
    ;

Decl
    : Bar
    | Command
    | NoteList
    | Comment
    ;

Bar
    : cmdBar RepeatTerminator DeclList cmdEnd           << ast.NewBar($T0.Pos, string($T0.Lit[len(":bar "):]), $2.(ast.NodeList)), nil >>
    ;

NoteList
    : NoteObject                                        << ast.NewNodeList($0.(ast.Node)), nil >>
    | NoteObject NoteList                               << ast.NewNodeList($0.(ast.Node), $1.(ast.NodeList)...), nil >>
    ;

NoteObject
    : NoteSymbol PropertyList                           << ast.NewNote($T0.Pos, []rune(string($T0.Lit))[0], $1.(ast.PropertyList)), nil >>
    | NoteGroup
    ;

NoteGroup
    : bracketBegin NoteList bracketEnd PropertyList     << ast.NewNoteGroup($1.(ast.NodeList), $3.(ast.PropertyList)) >>
    ;

NoteSymbol
    : symbol
    | rest
    ;

PropertyList
    : empty                          << ast.PropertyList(nil), nil >>
    | Property PropertyList          << ast.NewPropertyList($T0, $1) >>
    ;

Property
    : propSharp
    | propFlat
    | propStaccato
    | propAccent
    | propMarcato
    | propGhost
    | uint
    | propDot
    | propTuplet
    | propLetRing
    ;

Command
    : cmdAssign symbol uint          << ast.NewCmdAssign($T0.Pos, []rune(string($T1.Lit))[0], ast.Must($T2.Int64Value())) >>
    | cmdPlay                        << ast.NewCmdPlay($T0.Pos, string($T0.Lit[len(":play "):])) >>
    | cmdTempo uint                  << ast.NewCmdTempo(ast.Must($T1.Int64Value())) >>
    | cmdTimesig uint uint           << ast.NewCmdTimeSig(ast.Must($T1.Int64Value()), ast.Must($T2.Int64Value())) >>
    | cmdVelocity uint               << ast.NewCmdVelocity(ast.Must($T1.Int64Value())) >>
    | cmdChannel uint                << ast.NewCmdChannel(ast.Must($T1.Int64Value())) >>
    | cmdProgram uint                << ast.NewCmdProgram(ast.Must($T1.Int64Value())) >>
    | cmdControl uint uint           << ast.NewCmdControl(ast.Must($T1.Int64Value()), ast.Must($T2.Int64Value())) >>
    | cmdStart                       << ast.CmdStart{}, nil >>
    | cmdStop                        << ast.CmdStop{}, nil >>
    ;

Comment
    : blockComment                   << ast.NewBlockComment(string($T0.Lit)), nil >>
    ;
