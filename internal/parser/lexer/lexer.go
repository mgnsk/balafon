// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"os"
	"unicode/utf8"

	"github.com/mgnsk/balafon/internal/parser/token"
)

const (
	NoState    = -1
	NumStates  = 95
	NumSymbols = 113
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := os.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ';'
3: '\n'
4: '-'
5: ':'
6: 'b'
7: 'a'
8: 'r'
9: ':'
10: 'e'
11: 'n'
12: 'd'
13: ':'
14: 'p'
15: 'l'
16: 'a'
17: 'y'
18: ':'
19: 'a'
20: 's'
21: 's'
22: 'i'
23: 'g'
24: 'n'
25: ':'
26: 't'
27: 'e'
28: 'm'
29: 'p'
30: 'o'
31: ':'
32: 't'
33: 'i'
34: 'm'
35: 'e'
36: 's'
37: 'i'
38: 'g'
39: ':'
40: 'v'
41: 'e'
42: 'l'
43: 'o'
44: 'c'
45: 'i'
46: 't'
47: 'y'
48: ':'
49: 'c'
50: 'h'
51: 'a'
52: 'n'
53: 'n'
54: 'e'
55: 'l'
56: ':'
57: 'p'
58: 'r'
59: 'o'
60: 'g'
61: 'r'
62: 'a'
63: 'm'
64: ':'
65: 'c'
66: 'o'
67: 'n'
68: 't'
69: 'r'
70: 'o'
71: 'l'
72: ':'
73: 's'
74: 't'
75: 'a'
76: 'r'
77: 't'
78: ':'
79: 's'
80: 't'
81: 'o'
82: 'p'
83: '['
84: ']'
85: '#'
86: '$'
87: '^'
88: ')'
89: '.'
90: '/'
91: '3'
92: '/'
93: '5'
94: '*'
95: '0'
96: ' '
97: '/'
98: '/'
99: '\n'
100: '/'
101: '*'
102: '*'
103: '*'
104: '/'
105: ' '
106: '\t'
107: '\r'
108: '1'-'9'
109: '0'-'9'
110: 'a'-'z'
111: 'A'-'Z'
112: .
*/
