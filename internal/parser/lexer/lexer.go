// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"fmt"
	"io/ioutil"
	"unicode/utf8"

	"github.com/mgnsk/gong/internal/parser/util"
	"github.com/mgnsk/gong/internal/parser/token"
)

const (
	NoState    = -1
	NumStates  = 86
	NumSymbols = 96
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	fmt.Printf("Lexer.Scan() pos=%d\n", l.pos)
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		fmt.Printf("\tpos=%d, line=%d, col=%d, state=%d\n", l.pos, l.line, l.column, state)
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		fmt.Printf("\tS%d, : tok=%s, rune == %s(%x), next state == %d\n", state, token.TokMap.Id(tok.Type), util.RuneToString(rune1), rune1, nextState)
		fmt.Printf("\t\tpos=%d, size=%d, start=%d, end=%d\n", l.pos, size, start, end)
		if nextState != -1 {
			fmt.Printf("\t\taction:%s\n", ActTab[nextState].String())
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context
	fmt.Printf("Token at %s: %s \"%s\"\n", tok.String(), token.TokMap.Id(tok.Type), tok.Lit)

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ';'
3: '\n'
4: '"'
5: '"'
6: '-'
7: '#'
8: '$'
9: '^'
10: ')'
11: '.'
12: '/'
13: '*'
14: 'b'
15: 'a'
16: 'r'
17: '{'
18: '}'
19: '['
20: ']'
21: 'a'
22: 's'
23: 's'
24: 'i'
25: 'g'
26: 'n'
27: 't'
28: 'e'
29: 'm'
30: 'p'
31: 'o'
32: 't'
33: 'i'
34: 'm'
35: 'e'
36: 's'
37: 'i'
38: 'g'
39: 'c'
40: 'h'
41: 'a'
42: 'n'
43: 'n'
44: 'e'
45: 'l'
46: 'v'
47: 'e'
48: 'l'
49: 'o'
50: 'c'
51: 'i'
52: 't'
53: 'y'
54: 'p'
55: 'r'
56: 'o'
57: 'g'
58: 'r'
59: 'a'
60: 'm'
61: 'c'
62: 'o'
63: 'n'
64: 't'
65: 'r'
66: 'o'
67: 'l'
68: 'e'
69: 'n'
70: 'd'
71: 'p'
72: 'l'
73: 'a'
74: 'y'
75: 's'
76: 't'
77: 'a'
78: 'r'
79: 't'
80: 's'
81: 't'
82: 'o'
83: 'p'
84: '0'
85: '/'
86: '/'
87: '\n'
88: ' '
89: '\t'
90: '\r'
91: 'a'-'z'
92: 'A'-'Z'
93: '1'-'9'
94: '0'-'9'
95: .
*/
