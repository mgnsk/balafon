// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "github.com/mgnsk/gong/internal/ast"
    "github.com/mgnsk/gong/internal/parser/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : DeclList	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `DeclList : empty	<<  >>`,
		Id:         "DeclList",
		NTType:     1,
		Index:      1,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `DeclList : Command terminator DeclList	<< ast.NewDeclList(X[0], X[2]), nil >>`,
		Id:         "DeclList",
		NTType:     1,
		Index:      2,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclList(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `DeclList : NoteList terminator DeclList	<< ast.NewDeclList(X[0], X[2]), nil >>`,
		Id:         "DeclList",
		NTType:     1,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclList(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `DeclList : Bar terminator DeclList	<< ast.NewDeclList(X[0], X[2]), nil >>`,
		Id:         "DeclList",
		NTType:     1,
		Index:      4,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclList(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `RepeatTerminator : empty	<<  >>`,
		Id:         "RepeatTerminator",
		NTType:     2,
		Index:      5,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `RepeatTerminator : terminator RepeatTerminator	<<  >>`,
		Id:         "RepeatTerminator",
		NTType:     2,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Bar : "bar" stringLit "{" DeclList "}"	<< ast.NewBar(X[1].(*token.Token).StringValue(), X[3]), nil >>`,
		Id:         "Bar",
		NTType:     3,
		Index:      7,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBar(X[1].(*token.Token).StringValue(), X[3]), nil
		},
	},
	ProdTabEntry{
		String: `NoteList : empty	<<  >>`,
		Id:         "NoteList",
		NTType:     4,
		Index:      8,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `NoteList : NoteGroup NoteList	<< ast.NewNoteList(X[0], X[1]), nil >>`,
		Id:         "NoteList",
		NTType:     4,
		Index:      9,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNoteList(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `NoteList : Note NoteList	<< ast.NewNoteList(X[0], X[1]), nil >>`,
		Id:         "NoteList",
		NTType:     4,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNoteList(X[0], X[1]), nil
		},
	},
	ProdTabEntry{
		String: `NoteGroup : "[" NoteList "]" PropertyList	<< ast.NewNoteListFromGroup(X[1], X[3]) >>`,
		Id:         "NoteGroup",
		NTType:     5,
		Index:      11,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNoteListFromGroup(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Note : NoteSymbol PropertyList	<< ast.NewNote(X[0].(*token.Token).IDValue(), X[1]), nil >>`,
		Id:         "Note",
		NTType:     6,
		Index:      12,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNote(X[0].(*token.Token).IDValue(), X[1]), nil
		},
	},
	ProdTabEntry{
		String: `NoteSymbol : char	<<  >>`,
		Id:         "NoteSymbol",
		NTType:     7,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NoteSymbol : rest	<<  >>`,
		Id:         "NoteSymbol",
		NTType:     7,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PropertyList : empty	<<  >>`,
		Id:         "PropertyList",
		NTType:     8,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `PropertyList : Property PropertyList	<< ast.NewPropertyList(X[0].(*token.Token), X[1]) >>`,
		Id:         "PropertyList",
		NTType:     8,
		Index:      16,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPropertyList(X[0].(*token.Token), X[1])
		},
	},
	ProdTabEntry{
		String: `Property : sharp	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Property : flat	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Property : accent	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Property : ghost	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Property : uint	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Property : dot	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Property : tuplet	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Property : letRing	<<  >>`,
		Id:         "Property",
		NTType:     9,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Command : "assign" char uint	<< ast.NewCmdAssign(X[1].(*token.Token), X[2].(*token.Token)) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      25,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCmdAssign(X[1].(*token.Token), X[2].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Command : "tempo" uint	<< ast.NewCmdTempo(X[1].(*token.Token)) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      26,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCmdTempo(X[1].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Command : "timesig" uint uint	<< ast.NewCmdTimeSig(X[1].(*token.Token), X[2].(*token.Token)) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      27,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCmdTimeSig(X[1].(*token.Token), X[2].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Command : "channel" uint	<< ast.NewCmdChannel(X[1].(*token.Token)) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      28,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCmdChannel(X[1].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Command : "velocity" uint	<< ast.NewCmdVelocity(X[1].(*token.Token)) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      29,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCmdVelocity(X[1].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Command : "program" uint	<< ast.NewCmdProgram(X[1].(*token.Token)) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      30,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCmdProgram(X[1].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Command : "control" uint uint	<< ast.NewCmdControl(X[1].(*token.Token), X[2].(*token.Token)) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCmdControl(X[1].(*token.Token), X[2].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Command : "end"	<< ast.CmdEnd{}, nil >>`,
		Id:         "Command",
		NTType:     10,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.CmdEnd{}, nil
		},
	},
	ProdTabEntry{
		String: `Command : "play" stringLit	<< ast.CmdPlay(X[1].(*token.Token).StringValue()), nil >>`,
		Id:         "Command",
		NTType:     10,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.CmdPlay(X[1].(*token.Token).StringValue()), nil
		},
	},
	ProdTabEntry{
		String: `Command : "start"	<< ast.CmdStart{}, nil >>`,
		Id:         "Command",
		NTType:     10,
		Index:      34,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.CmdStart{}, nil
		},
	},
	ProdTabEntry{
		String: `Command : "stop"	<< ast.CmdStop{}, nil >>`,
		Id:         "Command",
		NTType:     10,
		Index:      35,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.CmdStop{}, nil
		},
	},
}
