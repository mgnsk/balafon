/* Lexical Part */

terminator : ';' '\n' | ';' | '\n' ;

uint      : _uint ;
_uint        : '0' | '1'-'9' {'0'-'9'} ;

_char      : 'a'-'z' | 'A'-'Z' ;
symbol     : _char ;
// Note: can't have standalone ident due to ambiguity with symbols.
_ident     : ( _char | _uint ) { _char | _uint } ;
_space     : ' ' ;

cmdBar        : ':' 'b' 'a' 'r' _space _ident ;
cmdEnd        : ':' 'e' 'n' 'd' ;
cmdPlay       : ':' 'p' 'l' 'a' 'y' _space _ident ;
cmdAssign     : ':' 'a' 's' 's' 'i' 'g' 'n' ;
cmdTempo      : ':' 't' 'e' 'm' 'p' 'o' ;
cmdTimesig    : ':' 't' 'i' 'm' 'e' 's' 'i' 'g' ;
cmdVelocity   : ':' 'v' 'e' 'l' 'o' 'c' 'i' 't' 'y' ;
cmdChannel    : ':' 'c' 'h' 'a' 'n' 'n' 'e' 'l' ;
cmdProgram    : ':' 'p' 'r' 'o' 'g' 'r' 'a' 'm' ;
cmdControl    : ':' 'c' 'o' 'n' 't' 'r' 'o' 'l' ;
cmdStart      : ':' 's' 't' 'a' 'r' 't' ;
cmdStop       : ':' 's' 't' 'o' 'p' ;

bracketBegin : '[' ;
bracketEnd   : ']' ;

rest     : '-' ;
sharp   : '#' ;
flat    : '$' ;
accent  : '^' ;
ghost   : ')' ;
dot     : '.' ;
tuplet  : '/' '3' | '/' '5' ;
letRing : '*' ;

_lineComment  : '/' '/' { . } '\n' ;
_blockComment : '/' '*' { . | '*' } '*' '/' ;

!comment    : _lineComment | _blockComment ;
!whitespace : ' ' | '\t' | '\r' ;

/* Syntax Part */

<<
import (
    "github.com/mgnsk/balafon/ast"
    "github.com/mgnsk/balafon/internal/parser/token"
)
>>

SourceFile
    : RepeatTerminator TopLevelDeclList << $1, nil >>
    ;

RepeatTerminator
    : empty
    | terminator RepeatTerminator
    ;

TopLevelDeclList
    : TopLevelDecl terminator RepeatTerminator TopLevelDeclList << ast.NewNodeList($0.(ast.Node), $3.(ast.NodeList)), nil >>
    | TopLevelDecl RepeatTerminator  << ast.NewNodeList($0.(ast.Node), nil), nil >>
    ;

BarBodyDeclList
    : BarBodyDecl terminator RepeatTerminator BarBodyDeclList << ast.NewNodeList($0.(ast.Node), $3.(ast.NodeList)), nil >>
    | BarBodyDecl RepeatTerminator  << ast.NewNodeList($0.(ast.Node), nil), nil >>
    ;

TopLevelDecl
    : Bar
    | TopLevelCommand
    | NoteList
    ;

BarBodyDecl
    : BarBodyCommand
    | NoteList
    ;

Bar
    : cmdBar RepeatTerminator BarBodyDeclList cmdEnd << ast.NewBar(string($T0.Lit[len(":bar "):]), $2.(ast.NodeList)), nil >>
    ;

NoteList
    : NoteObject << ast.NewNoteList($0.(ast.Node), nil), nil >>
    | NoteObject NoteList << ast.NewNoteList($0.(ast.Node), $1.(ast.NoteList)), nil >>
    ;

NoteObject
    : NoteSymbol PropertyList       << ast.NewNote([]rune(string($T0.Lit))[0], $1.(ast.PropertyList)), nil >>
    | bracketBegin NoteList bracketEnd PropertyList << ast.NewNoteListFromGroup($1.(ast.NoteList), $3.(ast.PropertyList)) >>
    ;

NoteSymbol
    : symbol
    | rest
    ;

PropertyList
    : empty                         << ast.PropertyList(nil), nil >>
    | Property PropertyList         << ast.NewPropertyList($T0, $1) >>
    ;

Property
    : sharp
    | flat
    | accent
    | ghost
    | uint
    | dot
    | tuplet
    | letRing
    ;

TopLevelCommand
    : cmdAssign symbol uint            << ast.NewCmdAssign([]rune(string($T1.Lit))[0], ast.Must($T2.Int64Value())) >>
    | cmdPlay                          << ast.NewCmdPlay(string($T0.Lit[len(":play "):])) >>
    | BarBodyCommand
    ;

BarBodyCommand
    : cmdTempo uint                  << ast.NewCmdTempo(ast.Must($T1.Int64Value())) >>
    | cmdTimesig uint uint           << ast.NewCmdTimeSig(ast.Must($T1.Int64Value()), ast.Must($T2.Int64Value())) >>
    | cmdVelocity uint               << ast.NewCmdVelocity(ast.Must($T1.Int64Value())) >>
    | cmdChannel uint                << ast.NewCmdChannel(ast.Must($T1.Int64Value())) >>
    | cmdProgram uint                << ast.NewCmdProgram(ast.Must($T1.Int64Value())) >>
    | cmdControl uint uint           << ast.NewCmdControl(ast.Must($T1.Int64Value()), ast.Must($T2.Int64Value())) >>
    | cmdStart                       << ast.CmdStart{}, nil >>
    | cmdStop                        << ast.CmdStop{}, nil >>
    ;
