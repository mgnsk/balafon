/* Lexical Part */

terminator : ';' '\n' | ';' | '\n' ;

_uint        : '0' | '1'-'9' {'0'-'9'} ;
_lineComment : '/' '/' { . } '\n' ;

char      : 'a'-'z' | 'A'-'Z' ;
uint      : _uint ;
stringLit : '"' { . } '"' ;

rest    : '-' ;
sharp   : '#' ;
flat    : '$' ;
accent  : '^' ;
ghost   : ')' ;
dot     : '.' ;
tuplet  : '/' _uint ;
letRing : '*' ;

!comment    : _lineComment ;
!whitespace : ' ' | '\t' | '\r' ;

/* Syntax Part */

<<
import (
    "github.com/mgnsk/gong/internal/ast"
    "github.com/mgnsk/gong/internal/parser/token"
)
>>

DeclList
    : empty
    | Decl DeclList << ast.NewDeclList($0, $1), nil >>
    ;

Bar
    : "bar" stringLit "{" DeclList "}"         << ast.NewBar($T1.StringValue(), $3), nil >>
    ;

/* TODO command general */
Decl
    /* : NoteList RepeatTerminator << ast.NewDeclList($0, $1), nil >> */
    : Command RepeatTerminator << ast.NewDeclList($0, $1), nil >>
    | Bar RepeatTerminator << ast.NewDeclList($0, $1), nil >>
    ;

RepeatTerminator
        : terminator RepeatTerminator
        | empty
        ;

NoteList
    : empty
    | NoteGroup NoteList            << ast.NewNoteList($0, $1), nil >>
    | Note NoteList                 << ast.NewNoteList($0, $1), nil >>
    ;

NoteGroup
    : "[" NoteList "]" PropertyList << ast.NewNoteListFromGroup($1, $3) >>
    ;

Note
    : NoteSymbol PropertyList       << ast.NewNote($T0.IDValue(), $1), nil >>
    ;

NoteSymbol
    : char
    | rest
    ;

PropertyList
    : empty
    | Property PropertyList         << ast.NewPropertyList($T0, $1) >>
    ;

Property
    : sharp
    | flat
    | accent
    | ghost
    | uint
    | dot
    | tuplet
    | letRing
    ;

Command:
    : "assign" char uint            << ast.NewCmdAssign($T1, $T2) >>
    | "tempo" uint                  << ast.NewCmdTempo($T1) >>
    | "timesig" uint uint           << ast.NewCmdTimeSig($T1, $T2) >>
    | "channel" uint                << ast.NewCmdChannel($T1) >>
    | "velocity" uint               << ast.NewCmdVelocity($T1) >>
    | "program" uint                << ast.NewCmdProgram($T1) >>
    | "control" uint uint           << ast.NewCmdControl($T1, $T2) >>
    | "end"                         << ast.CmdEnd{}, nil >>
    | "play" stringLit              << ast.CmdPlay($T1.StringValue()), nil >>
    | "start"                       << ast.CmdStart{}, nil >>
    | "stop"                        << ast.CmdStop{}, nil >>
    ;
