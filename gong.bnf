/* Lexical Part */

_singleNote  : 'a'-'z' | 'A'-'Z' | '-' ;
_uint        : '0' | '1'-'9' {'0'-'9'} ;
_lineComment : '/' '/' { . } '\n' ;

singleNote : _singleNote ;
stringLit  : '"' { . } '"' ;
sharp      : '#' ;
flat       : '$' ;
accent     : '^' ;
ghost      : ')' ;
uint       : _uint ;
dot        : '.' ;
tuplet     : '/' _uint ;
letRing    : '*' ;

!comment    : _lineComment ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;

/* Syntax Part */

<<
import (
    "github.com/mgnsk/gong/internal/ast"
    "github.com/mgnsk/gong/internal/parser/token"
)
>>

Expr
    : NoteList
    | Command
    ;

NoteList
    : empty
    | NoteGroup NoteList            << ast.NewNoteList($0, $1), nil >>
    | Note NoteList                 << ast.NewNoteList($0, $1), nil >>
    ;

NoteGroup
    : "[" NoteList "]" PropertyList << ast.NewNoteListFromGroup($1, $3) >>
    ;

Note
    : singleNote PropertyList       << ast.NewNote($T0.IDValue(), $1), nil >>
    ;

PropertyList
    : empty
    | Property PropertyList         << ast.NewPropertyList($T0, $1) >>
    ;

Property
    : sharp
    | flat
    | accent
    | ghost
    | uint
    | dot
    | tuplet
    | letRing
    ;

Command:
    : CommandName ArgumentList      << ast.NewCommand($T0.IDValue(), $1) >>
    ;

ArgumentList:
    : empty
    | singleNote ArgumentList       << ast.NewArgumentList($T0, $1), nil >>
    | stringLit ArgumentList        << ast.NewArgumentList($T0, $1), nil >>
    | uint ArgumentList             << ast.NewArgumentList($T0, $1), nil >>
    ;

CommandName:
    : "assign"
    | "tempo"
    | "channel"
    | "velocity"
    | "program"
    | "control"
    | "bar"
    | "end"
    | "play"
    | "start"
    | "stop"
    ;
