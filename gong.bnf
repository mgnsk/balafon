/* Lexical Part */

_digit       : '0'-'9' ;
_lower       : 'a'-'z' ;
_upper       : 'A'-'Z' ;
_char        : _lower | _upper ;
_identChar   : _char | '-' ;
_uint        : '0' | '1'-'9' {_digit} ;
_stringLit   : '"' { . } '"' ;
_lineComment : '/' '/' { . } '\n';

multiNote : _identChar {_identChar} ;
barName   : _stringLit ;
sharp     : '#' ;
flat      : '$' ;
uint      : _uint ;
dot       : '.' ;
tuplet    : '/' _uint ;

!comment    : _lineComment ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;

/* Syntax Part */

<<
import (
    "github.com/mgnsk/gong/internal/ast"
    "github.com/mgnsk/gong/internal/parser/token"
)
>>

Expr
    : NoteAssignment
    | Track
    | Command
    ;

NoteAssignment
    : multiNote "=" uint            << ast.NewNoteAssignment($T0, $T2) >>
    ;

Track
    : empty
    | NoteList Track                << ast.NewTrack($0.(ast.NoteList), $1), nil >>
    ;

NoteList
    : multiNote NotePropertyList    << ast.NewNoteList($T0.IDValue(), $1), nil >>
    ;

NotePropertyList
    : empty
    | sharp NotePropertyList        << ast.NewNotePropertyList($T0, $1) >>
    | flat NotePropertyList         << ast.NewNotePropertyList($T0, $1) >>
    | uint NotePropertyList         << ast.NewNotePropertyList($T0, $1) >>
    | dot NotePropertyList          << ast.NewNotePropertyList($T0, $1) >>
    | tuplet NotePropertyList       << ast.NewNotePropertyList($T0, $1) >>
    ;

Command:
    : "bar" barName                 << ast.NewCommand("bar", $T1.IDValue()) >>
    | "end"                         << ast.NewCommand("end") >>
    | "play" barName                << ast.NewCommand("play", $T1.IDValue()) >>
    | "tempo" uint                  << ast.NewCommand("tempo", $T1.IDValue()) >>
    | "channel" uint                << ast.NewCommand("channel", $T1.IDValue()) >>
    | "velocity" uint               << ast.NewCommand("velocity", $T1.IDValue()) >>
    | "program" uint                << ast.NewCommand("program", $T1.IDValue()) >>
    | "control" uint uint           << ast.NewCommand("control", $T1.IDValue(), $T2.IDValue()) >>
    ;
